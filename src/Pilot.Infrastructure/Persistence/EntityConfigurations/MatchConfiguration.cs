using Pilot.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Pilot.Infrastructure.Persistence.EntityConfigurations
{
    // Class responsible for configuring the "Match" entity using Entity Framework
    public class MatchConfiguration : IEntityTypeConfiguration<Match>
    {
        // Method to configure the entity properties and relationships
        public void Configure(EntityTypeBuilder<Match> builder)
        {
            // Set the table name for the "Match" entity
            builder.ToTable("Match");

            // Specify the primary key for the entity
            builder.HasKey(x => x.Id);
            // Set the value generation for the "Id" property (assuming it's not generated by the database)
            builder.Property(x => x.Id).ValueGeneratedNever();

            // Specify the primary key for the "RefereeId" property            
            builder.HasKey(x => x.RefereeId);
            // Set the value generation for the "RefereeId" property (assuming it's not generated by the database)
            builder.Property(x => x.RefereeId).ValueGeneratedNever();

            // Configure a many-to-many (N:N) relationship between "Match" and "Local" entities
            builder.HasOne(x => x.LocalTeam)
            .WithMany(tm => tm.LocalMatchs);

            builder.HasOne(x => x.VisitorTeam)
            .WithMany(tm => tm.VisitorMatchs).OnDelete(DeleteBehavior.NoAction);

            builder.Property(x => x.CompetitionId).ValueGeneratedNever();  
        }
    }
}