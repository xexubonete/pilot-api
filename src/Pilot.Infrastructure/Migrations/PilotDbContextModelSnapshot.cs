// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pilot.Infrastructure.Persistence.DbContexts;

#nullable disable

namespace Pilot.Infrastructure.Migrations
{
    [DbContext(typeof(PilotDbContext))]
    partial class PilotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("LanguageReferee", b =>
                {
                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefereesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LanguagesId", "RefereesId");

                    b.HasIndex("RefereesId");

                    b.ToTable("LanguageReferee");
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Competition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("varchar(50)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("COMPETITION", (string)null);
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Diaclect")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LANGUAGE", (string)null);
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Match", b =>
                {
                    b.Property<Guid>("RefereeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocalTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisitorTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RefereeId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("LocalTeamId");

                    b.HasIndex("VisitorTeamId");

                    b.ToTable("MATCH", (string)null);
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RedCard")
                        .HasColumnType("int");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("YellowCard")
                        .HasColumnType("decimal(2,0)");

                    b.HasKey("Id");

                    b.ToTable("PLAYER", (string)null);
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Referee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("varchar(50)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("REFEREE", (string)null);
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TEAM", (string)null);
                });

            modelBuilder.Entity("LanguageReferee", b =>
                {
                    b.HasOne("Pilot.Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilot.Domain.Entities.Referee", null)
                        .WithMany()
                        .HasForeignKey("RefereesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Competition", b =>
                {
                    b.HasOne("Pilot.Domain.Entities.Team", null)
                        .WithMany("Competitions")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Match", b =>
                {
                    b.HasOne("Pilot.Domain.Entities.Competition", null)
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilot.Domain.Entities.Team", "LocalTeam")
                        .WithMany("LocalMatchs")
                        .HasForeignKey("LocalTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pilot.Domain.Entities.Team", "VisitorTeam")
                        .WithMany("VisitorMatchs")
                        .HasForeignKey("VisitorTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalTeam");

                    b.Navigation("VisitorTeam");
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Competition", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Pilot.Domain.Entities.Team", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("LocalMatchs");

                    b.Navigation("VisitorMatchs");
                });
#pragma warning restore 612, 618
        }
    }
}
